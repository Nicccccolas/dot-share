// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  username  String     @unique
  email     String     @unique
  password  String
  isActive  Boolean    @default(true)
  role      Role       @default(USER)
  post      Post[]
  profile   Profile?
  reaction  Reaction[]
  token     Token[]

  @@map("users")
}

model Token {
  id          String    @id @default(uuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now()) @map("created_at")
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@map("tokens")
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  bio       String
  birthday  DateTime
  imageUrl  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("profiles")
}

model Post {
  id         String      @id @default(uuid())
  title      String
  content    String?
  imageUrl   String?
  author     User        @relation(fields: [authorId], references: [id])
  authorId   String      @map("author_id")
  reactions  Reaction[]
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@map("posts")
}

model Reaction {
  id        Int      @id @default(autoincrement())
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reactions")
}

model Category {
  id          String   @id @unique @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
