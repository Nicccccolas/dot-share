// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Roles {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  permissions String[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Users {
  id         String      @id @default(uuid())
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  username   String
  email      String      @unique
  password   String
  is_active  Boolean     @default(true)
  post       Post[]
  profile    Profiles?
  reactions  Reactions[]
  Tokens     Tokens[]
}

model Tokens {
  id          String    @id @default(uuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        Users     @relation(fields: [userId], references: [id])
  userId      String
}

model Profiles {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  bio        String
  birthday   DateTime
  image_url  String
  user       Users    @relation(fields: [user_id], references: [id])
  user_id    String   @unique
}

model Post {
  id         String      @id @default(uuid())
  title      String
  content    String?
  imageUrl   String?
  author     Users       @relation(fields: [authorId], references: [id])
  authorId   String      @map("author_id")
  reactions  Reactions[]
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@map("posts")
}

model Reactions {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  type       String
  user       Users    @relation(fields: [user_id], references: [id])
  user_id    String
  post       Post     @relation(fields: [post_id], references: [id])
  post_id    String
}

model Category {
  id          String   @id @default(uuid()) @unique
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
