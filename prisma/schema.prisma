// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String               @id @default(uuid())
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  username    String               @unique
  email       String               @unique
  password    String
  isActive    Boolean              @default(true) @map("is_active")
  role        Role                 @default(USER)
  post        Posts[]
  profile     Profile?
  reaction    Reaction[]
  token       Token[]
  communities UsersOnCommunities[]

  @@map("users")
}

model Token {
  id          String    @id @default(uuid())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now()) @map("created_at")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")

  @@map("tokens")
}

model Profile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  bio       String
  birthday  DateTime
  imageUrl  String   @map("image_url")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @map("user_id")

  @@map("profiles")
}

model Posts {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  title     String
  content   String
  image_url String
  author    User       @relation(fields: [author_id], references: [id])
  author_id String
  reactions Reaction[]

  @@map("posts")
}

model Reaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  post      Posts    @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")

  @@map("reactions")
}

model Category {
  id          String   @id @unique @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Community {
  id          Int                  @id @unique @default(autoincrement())
  name        String
  description String
  users       UsersOnCommunities[]
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")

  @@map("communities")
}

model UsersOnCommunities {
  id          Int       @id @unique @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int       @map("community_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("users_on_communities")
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
